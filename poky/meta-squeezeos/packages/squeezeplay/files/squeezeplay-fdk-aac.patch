Index: squeezeplay-7.7.3/Makefile.am
===================================================================
--- squeezeplay-7.7.3/Makefile.am	(revision 1184)
+++ squeezeplay-7.7.3/Makefile.am	(revision 1185)
@@ -48,6 +48,7 @@
 	$(OSX_LIB_DIR)/libSDLmain.a \
 	$(OSX_LIB_DIR)/libpng.a \
 	$(OSX_LIB_DIR)/libjpeg.a \
+	$(OSX_LIB_DIR)/libfdk-aac.a \
 	$(JIVE_DEPENDENCIES_LIB_DIR)/libaudio.a $(JIVE_DEPENDENCIES_LIB_DIR)/libnet.a $(JIVE_DEPENDENCIES_LIB_DIR)/libui.a $(JIVE_DEPENDENCIES_LIB_DIR)/libdecode.a
 
 SqueezePlay: $(jive_OBJECTS) $(jive_DEPENDENCIES)
@@ -200,6 +201,7 @@
 	src/audio/alac/alac.c \
 	src/audio/decode/decode.c \
 	src/audio/decode/decode_alsa.c \
+	src/audio/decode/decode_aac.c \
 	src/audio/decode/decode_flac.c \
 	src/audio/decode/decode_mad.c \
 	src/audio/decode/decode_output.c \
@@ -242,7 +244,7 @@
 	src/jive_debug.c \
 	src/log.c
 
-jive_LDADD = libui.la libdecode.la libnet.la -llua ${SPPRIVATE_LIB}
+jive_LDADD = libui.la libdecode.la libnet.la -lfdk-aac -llua ${SPPRIVATE_LIB}
 
 jive_alsa_SOURCES = \
 	src/audio/decode/decode_alsa_backend.c
Index: squeezeplay-7.7.3/Makefile.in
===================================================================
--- squeezeplay-7.7.3/Makefile.in	(revision 1184)
+++ squeezeplay-7.7.3/Makefile.in	(revision 1185)
@@ -73,6 +73,7 @@
 libdecode_la_DEPENDENCIES = libaudio.la
 am_libdecode_la_OBJECTS = mp4.lo mqueue.lo streambuf.lo alac.lo \
 	decode.lo decode_alsa.lo decode_flac.lo decode_mad.lo \
+	decode_aac.lo \
 	decode_output.lo decode_pcm.lo decode_portaudio.lo \
 	decode_sample.lo decode_vorbis.lo decode_alac.lo \
 	visualizer_vumeter.lo visualizer_spectrum.lo kiss_fft.lo
@@ -269,6 +270,7 @@
 	$(OSX_LIB_DIR)/libSDLmain.a \
 	$(OSX_LIB_DIR)/libpng.a \
 	$(OSX_LIB_DIR)/libjpeg.a \
+	$(OSX_LIB_DIR)/libfdk-aac.a \
 	$(JIVE_DEPENDENCIES_LIB_DIR)/libaudio.a $(JIVE_DEPENDENCIES_LIB_DIR)/libnet.a $(JIVE_DEPENDENCIES_LIB_DIR)/libui.a $(JIVE_DEPENDENCIES_LIB_DIR)/libdecode.a
 
 BUNDLE_NAME = SqueezePlay.app
@@ -328,6 +330,7 @@
 	src/audio/alac/alac.c \
 	src/audio/decode/decode.c \
 	src/audio/decode/decode_alsa.c \
+	src/audio/decode/decode_aac.c \
 	src/audio/decode/decode_flac.c \
 	src/audio/decode/decode_mad.c \
 	src/audio/decode/decode_output.c \
@@ -353,7 +356,7 @@
 	src/jive_debug.c \
 	src/log.c
 
-jive_LDADD = libui.la libdecode.la libnet.la -llua ${SPPRIVATE_LIB}
+jive_LDADD = libui.la libdecode.la libnet.la -lfdk-aac -llua ${SPPRIVATE_LIB}
 jive_alsa_SOURCES = \
 	src/audio/decode/decode_alsa_backend.c
 
@@ -513,6 +516,7 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/decode_alac.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/decode_alsa.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/decode_alsa_backend.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/decode_aac.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/decode_flac.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/decode_mad.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/decode_output.Plo@am__quote@
@@ -647,6 +651,13 @@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o decode_alsa.lo `test -f 'src/audio/decode/decode_alsa.c' || echo '$(srcdir)/'`src/audio/decode/decode_alsa.c
 
+decode_aac.lo: src/audio/decode/decode_aac.c
+@am__fastdepCC_TRUE@	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT decode_aac.lo -MD -MP -MF "$(DEPDIR)/decode_aac.Tpo" -c -o decode_aac.lo `test -f 'src/audio/decode/decode_aac.c' || echo '$(srcdir)/'`src/audio/decode/decode_aac.c; \
+@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/decode_aac.Tpo" "$(DEPDIR)/decode_aac.Plo"; else rm -f "$(DEPDIR)/decode_aac.Tpo"; exit 1; fi
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='src/audio/decode/decode_aac.c' object='decode_aac.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o decode_aac.lo `test -f 'src/audio/decode/decode_aac.c' || echo '$(srcdir)/'`src/audio/decode/decode_aac.c
+
 decode_flac.lo: src/audio/decode/decode_flac.c
 @am__fastdepCC_TRUE@	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT decode_flac.lo -MD -MP -MF "$(DEPDIR)/decode_flac.Tpo" -c -o decode_flac.lo `test -f 'src/audio/decode/decode_flac.c' || echo '$(srcdir)/'`src/audio/decode/decode_flac.c; \
 @am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/decode_flac.Tpo" "$(DEPDIR)/decode_flac.Plo"; else rm -f "$(DEPDIR)/decode_flac.Tpo"; exit 1; fi
Index: squeezeplay-7.7.3/src/audio/decode/decode.c
===================================================================
--- squeezeplay-7.7.3/src/audio/decode/decode.c	(revision 1184)
+++ squeezeplay-7.7.3/src/audio/decode/decode.c	(revision 1185)
@@ -84,6 +84,8 @@
 	&decode_wma,
 	&decode_aac,
 	&decode_spotify,
+#else
+	&decode_aac,
 #endif
 	&decode_vorbis,
 	&decode_flac,
@@ -773,7 +775,7 @@
 	 * 1: self
 	 */
 
-	LOG_DEBUG(log_audio_decode, "decode_sond_ended");
+	LOG_DEBUG(log_audio_decode, "decode_song_ended");
 
 	if (mqueue_write_request(&decode_mqueue, decode_song_ended_handler, 0)) {
 		mqueue_write_complete(&decode_mqueue);
Index: squeezeplay-7.7.3/src/audio/decode/decode_aac.c
===================================================================
--- squeezeplay-7.7.3/src/audio/decode/decode_aac.c	(revision 0)
+++ squeezeplay-7.7.3/src/audio/decode/decode_aac.c	(revision 1185)
@@ -0,0 +1,374 @@
+/*
+** Copyright 2019 Ralph Irving. All Rights Reserved.
+** This file is licensed under BSD. Please see the LICENSE file for details.
+*/
+
+#include "common.h"
+
+#include "audio/streambuf.h"
+#include "audio/decode/decode.h"
+#include "audio/decode/decode_priv.h"
+
+#include "audio/mp4.h"
+
+/* Redefined in fdk-aac header file */
+#ifdef SAMPLE_MIN
+#undef SAMPLE_MIN
+#endif
+#ifdef SAMPLE_MAX
+#undef SAMPLE_MAX
+#endif
+
+#include <fdk-aac/aacdecoder_lib.h>
+
+#ifdef AACDECODER_LIB_VL0
+#define FDKDEC_VER_AT_LEAST(vl0, vl1) \
+    ((AACDECODER_LIB_VL0 > vl0) || \
+     (AACDECODER_LIB_VL0 == vl0 && AACDECODER_LIB_VL1 >= vl1))
+#else
+#define FDKDEC_VER_AT_LEAST(vl0, vl1) 0
+#endif
+
+#if !FDKDEC_VER_AT_LEAST(2, 5) // < 2.5.10
+#define AAC_PCM_MAX_OUTPUT_CHANNELS AAC_PCM_OUTPUT_CHANNELS
+#endif
+
+#define NUM_CHANNELS       (2)
+#define INPUT_BUFFER_SIZE  (4096)
+#define OUTPUT_BUFFER_SIZE (NUM_CHANNELS * 4096 * sizeof(sample_t))
+
+struct decode_aac {
+	/* he-aac decoder */
+	HANDLE_AACDECODER heaacdec;
+	TRANSPORT_TYPE type;
+
+	/* mp4 parser */
+	int isMP4;
+	int mp4_track;
+	struct decode_mp4 mp4;
+
+	/* stream info */
+	int sample_rate;
+	int bits_per_sample;
+	int samples_per_frame;
+	int num_channels;
+
+	/* buffers */
+	UCHAR *input_ptr;
+	UCHAR *input_buffer;
+	sample_t *output_buffer;
+
+	UINT bytes_read;
+	UINT bytes_valid;
+};
+
+
+static bool_t decode_aac_init_heaac(struct decode_aac *self)
+{
+	struct decode_mp4 *mp4 = &self->mp4;
+	AAC_DECODER_ERROR err;
+	size_t conf_size;
+	u8_t *conf;
+
+	LOG_DEBUG(log_audio_codec, "FDK-AAC");
+
+	self->heaacdec = aacDecoder_Open(self->type, 1);
+
+	if ( !self->heaacdec ) {
+		LOG_DEBUG(log_audio_codec, "open failed (%d)", self->type);
+		return FALSE;
+	}
+	
+	if (self->isMP4) {
+		// FIXME
+		self->mp4_track = 0;
+
+		mp4_track_conf(mp4, self->mp4_track, &conf, &conf_size);
+		if (!conf) {
+			LOG_WARN(log_audio_codec, "no track data");
+			goto error;
+		}
+
+		if ((err = aacDecoder_ConfigRaw(self->heaacdec, (UCHAR **) &conf, (const UINT *) &conf_size)) != AAC_DEC_OK) {
+			LOG_ERROR(log_audio_codec, "can't set raw config (%x)", err);
+			goto error;
+		}
+	}
+
+	/* 0 = muting, 1 = noise */
+	if ((err = aacDecoder_SetParam(self->heaacdec, AAC_CONCEAL_METHOD, 0)) != AAC_DEC_OK) {
+		LOG_ERROR(log_audio_codec, "can't set conceal method (%x)", err);
+		goto error;
+	} 
+
+	if ((err = aacDecoder_SetParam(self->heaacdec, AAC_PCM_MAX_OUTPUT_CHANNELS, 2)) != AAC_DEC_OK) {
+		LOG_ERROR(log_audio_codec, "can't set max output channels (%x)", err);
+		goto error;
+	} 
+
+	return TRUE;
+
+ error:
+	aacDecoder_Close(self->heaacdec);
+	self->heaacdec = NULL;
+	return FALSE;
+}
+
+
+static u32_t decode_aac_callback_heaac(struct decode_aac *self)
+{
+	AAC_DECODER_ERROR err;
+	CStreamInfo *stream_info;
+	s16_t *rptr;
+	sample_t *wptr;
+	sample_t s;
+	int frames;
+	int i;
+
+	err = aacDecoder_Fill(self->heaacdec, &self->input_ptr, &self->bytes_read, &self->bytes_valid);
+
+	/* Give up decoded on any other error */
+	if (err != AAC_DEC_OK) {
+		LOG_DEBUG(log_audio_codec, "fill error %x", err);
+
+		current_decoder_state |= DECODE_STATE_ERROR;
+		return FALSE;
+	}
+
+	err = aacDecoder_DecodeFrame(self->heaacdec, (INT_PCM *)self->output_buffer, OUTPUT_BUFFER_SIZE, 0);
+
+	if (err == AAC_DEC_NOT_ENOUGH_BITS) {
+		LOG_DEBUG(log_audio_codec, "not enough bits");
+		return FALSE;
+	}
+
+	if (err == AAC_DEC_TRANSPORT_SYNC_ERROR) {
+		LOG_WARN(log_audio_codec, "sync error %d %d", self->bytes_read, self->bytes_valid);
+		return TRUE;
+	}
+
+	/* Do concealment of corrupted frames */
+	if (IS_DECODE_ERROR(err)) {
+		LOG_WARN(log_audio_codec, "concealing corrupted frames %x", err);
+		err = aacDecoder_DecodeFrame(self->heaacdec, (INT_PCM *)self->output_buffer, OUTPUT_BUFFER_SIZE, AACDEC_CONCEAL);
+	}
+
+	/* Give up decoded on any other error */
+	if (err != AAC_DEC_OK) {
+		LOG_DEBUG(log_audio_codec, "error %x", err);
+
+		current_decoder_state |= DECODE_STATE_ERROR;
+		return FALSE;
+	}
+
+	stream_info = aacDecoder_GetStreamInfo(self->heaacdec);
+
+	/* No samples available if frame size is zero */
+	if (stream_info->frameSize == 0) {
+		return FALSE;
+	}
+
+	self->samples_per_frame = stream_info->frameSize;
+
+	if (self->num_channels != stream_info->numChannels || self->sample_rate != stream_info->sampleRate) {
+		self->num_channels = stream_info->numChannels;
+		self->sample_rate = stream_info->sampleRate;
+
+		LOG_DEBUG(log_audio_codec, "MPEG-4 AOT: %d", stream_info->aot);
+		LOG_DEBUG(log_audio_codec, "MPEG-2 Profile: %d", stream_info->profile);
+		LOG_DEBUG(log_audio_codec, "Sample rate: %d", stream_info->sampleRate);
+		LOG_DEBUG(log_audio_codec, "Channels: %d", stream_info->numChannels);
+		LOG_DEBUG(log_audio_codec, "Frame size: %d", stream_info->frameSize);
+	}
+
+	/* From decode_alac.c 16bit sample size only, 32bit not included */
+	/* frames = outputsize / samplesize / self->num_channels; */
+	frames = self->samples_per_frame * self->num_channels;
+
+	wptr = ((sample_t *)(void *)self->output_buffer) + (frames * 2);
+
+	if (self->num_channels == 1) {
+		/* mono */
+		rptr = ((s16_t *)(void *)self->output_buffer) + (frames * 1);
+
+		for (i = 0; i < frames; i++) {
+			s = (*--rptr) << 16;
+			*--wptr = s;
+			*--wptr = s;
+		}
+	}
+	else if (self->num_channels == 2) {
+		/* stereo */
+		rptr = ((s16_t *)(void *)self->output_buffer) + (frames * 2);
+
+		for (i = 0; i < frames; i++) {
+			*--wptr = (*--rptr) << 16;
+			*--wptr = (*--rptr) << 16;
+		}
+	}
+	else if (self->num_channels > 2) {
+		current_decoder_state |= DECODE_STATE_ERROR | DECODE_STATE_NOT_SUPPORTED;
+		return FALSE;
+	}
+
+	return TRUE;
+}
+
+
+static inline bool_t do_mp4_read(struct decode_aac *self, bool_t *streaming) {
+	if (self->bytes_valid == 0) {
+		if (self->isMP4) {
+			size_t bytes_read = 0;
+			self->input_ptr = mp4_read(&self->mp4, self->mp4_track, &bytes_read, streaming);
+			self->bytes_read = bytes_read;
+		}
+		else {
+			self->bytes_read = streambuf_read(self->input_buffer, 0, INPUT_BUFFER_SIZE, streaming);
+			self->input_ptr = self->input_buffer;
+		}
+
+		self->bytes_valid = self->bytes_read;
+		current_decoder_state &= ~DECODE_STATE_UNDERRUN;
+		
+		if (self->bytes_read == 0) {
+			if (*streaming) {
+				return TRUE;	/* need to wait for more */
+			} else {
+				current_decoder_state |= DECODE_STATE_UNDERRUN;
+				return FALSE;
+			}
+		}
+	}
+
+	return TRUE;
+}
+
+
+static bool_t decode_aac_callback(void *data) {
+	struct decode_aac *self = (struct decode_aac *) data;
+	bool_t streaming;
+
+	if (current_decoder_state & DECODE_STATE_ERROR) {
+		return FALSE;
+	}
+
+	if (!self->heaacdec) {
+		if (self->isMP4) {
+			size_t status = mp4_open(&self->mp4);
+			if (status == 2) {
+				return TRUE;		/* need to wait for some more data */
+			} else 	if (status != 1) {
+				current_decoder_state |= DECODE_STATE_ERROR | DECODE_STATE_NOT_SUPPORTED;
+				return FALSE;
+			}
+		}
+
+		/* HE-AAC stream */
+		if (!decode_aac_init_heaac(self)) {
+			current_decoder_state |= DECODE_STATE_ERROR | DECODE_STATE_NOT_SUPPORTED;
+			return FALSE;
+		}
+	}
+
+	if (self->heaacdec) {
+		if (!do_mp4_read(self, &streaming)) {
+			return FALSE;
+		}
+
+		if (self->bytes_read == 0) {
+			return TRUE;	/* need to wait for more */
+		}
+
+		if (!decode_aac_callback_heaac(self)) {
+			return FALSE;
+		}
+	}
+
+	decode_output_samples(self->output_buffer,
+			      self->samples_per_frame,
+			      self->sample_rate);
+
+	return TRUE;
+}
+
+
+static void *decode_aac_start(u8_t *params, u32_t num_params) {
+	struct decode_aac *self;
+
+	LOG_DEBUG(log_audio_codec, "decode_aac_start(%c)", params[0]);
+
+	self = malloc(sizeof(struct decode_aac));
+	memset(self, 0, sizeof(struct decode_aac));
+
+	self->input_buffer = malloc(INPUT_BUFFER_SIZE);
+	self->output_buffer = malloc(OUTPUT_BUFFER_SIZE);
+
+	/* Assume we aren't changing sample rates until proven wrong */
+	self->sample_rate = decode_output_samplerate();
+
+	/* param[0]:	'1' (adif bitstream), '2' (adts bitstream), '3' (loas/latm bitstream),
+			'4' (rawpkts), '5' (mp4 file format), '6' (latm within rawpkts) */
+
+	self->type = params[0] - '0';
+
+	switch (params[0]) {
+		case '3': /* TT_MP4_LOAS */
+			self->type = TT_MP4_LOAS;
+			break;
+
+		case '4': /* TT_MP4_RAWPACKETS */
+			self->type = TT_MP4_RAW;
+			break;
+
+		case '5': /* TT_MP4_MP4F */
+			self->isMP4 = 1;
+			self->type = TT_MP4_RAW;
+			mp4_init(&self->mp4);
+			break;
+	}
+
+	return self;
+}
+
+
+static void decode_aac_stop(void *data) {
+	struct decode_aac *self = (struct decode_aac *) data;
+
+	LOG_DEBUG(log_audio_codec, "decode_aac_stop()");
+
+	if (self->heaacdec) {
+		aacDecoder_Close(self->heaacdec);
+		self->heaacdec = NULL;
+	}
+
+	if (self->isMP4) {
+		mp4_free(&self->mp4);
+	}
+
+	if (self->output_buffer) {
+		free(self->output_buffer);
+		self->output_buffer = NULL;
+	}
+
+	if (self->input_buffer) {
+		free(self->input_buffer);
+		self->input_buffer = NULL;
+	}
+	
+	free(self);
+}
+
+
+static size_t decode_aac_samples(void *data) {
+	return BYTES_TO_SAMPLES(OUTPUT_BUFFER_SIZE);
+}
+
+
+struct decode_module decode_aac = {
+	'a',
+	"aac",
+	decode_aac_start,
+	decode_aac_stop,
+	decode_aac_samples,
+	decode_aac_callback,
+};
Index: squeezeplay-7.7.3/src/audio/decode/decode_priv.h
===================================================================
--- squeezeplay-7.7.3/src/audio/decode/decode_priv.h	(revision 1184)
+++ squeezeplay-7.7.3/src/audio/decode/decode_priv.h	(revision 1185)
@@ -87,6 +87,8 @@
 extern struct decode_module decode_wma;
 extern struct decode_module decode_aac;
 extern struct decode_module decode_spotify;
+#else
+extern struct decode_module decode_aac;
 #endif
 
 
